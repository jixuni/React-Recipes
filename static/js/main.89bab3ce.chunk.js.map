{"version":3,"sources":["tempList.js","components/Recipe.js","components/RecipeSearch.js","components/RecipeList.js","tempDetails.js","components/RecipeDetail.js","App.js","serviceWorker.js","index.js"],"names":["recipes","recipe_id","image_url","title","publisher","source_url","Recipe","_this$props$recipe","this","props","recipe","handleDetails","react_default","a","createElement","Fragment","className","src","alt","style","height","type","onClick","href","target","rel","Component","RecipeSearch","_this$props","value","handleSubmit","handleChange","onSubmit","htmlFor","name","placeholder","onChange","RecipeList","RecipeSearch_RecipeSearch","map","Recipe_Recipe","key","f2f_url","ingredients","publisher_url","RecipeDetail","state","id","url","fetch","data","json","jsonData","setState","console","log","_context","t0","_this$state$recipe","handleIndex","item","index","App","base_url","details_id","pageIndex","search","query","displayPage","RecipeList_RecipeList","_this","RecipeDetail_RecipeDetail","e","preventDefault","_this$state","concat","getRecipes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89bab3ce.chunk.js","sourcesContent":["export const recipes = [{\n        recipe_id: 35382,\n        image_url: \"http://static.food2fork.com/Jalapeno2BPopper2BGrilled2BCheese2BSandwich2B12B500fd186186.jpg\",\n        title: \"Jalapeno Popper Grilled Cheese Sandwich\",\n        publisher: \"Closet Cooking\",\n        source_url: \"http://www.closetcooking.com/2011/04/jalapeno-popper-grilled-cheese-sandwich.html\"\n    },\n    {\n        recipe_id: 35383,\n        image_url: \"http://static.food2fork.com/Jalapeno2BPopper2BGrilled2BCheese2BSandwich2B12B500fd186186.jpg\",\n        title: \"Jalapeno Popper Grilled Cheese Sandwich\",\n        publisher: \"Closet Cooking\",\n        source_url: \"http://www.closetcooking.com/2011/04/jalapeno-popper-grilled-cheese-sandwich.html\"\n    },\n    {\n        recipe_id: 35384,\n        image_url: \"http://static.food2fork.com/Jalapeno2BPopper2BGrilled2BCheese2BSandwich2B12B500fd186186.jpg\",\n        title: \"Jalapeno Popper Grilled Cheese Sandwich\",\n        publisher: \"Closet Cooking\",\n        source_url: \"http://www.closetcooking.com/2011/04/jalapeno-popper-grilled-cheese-sandwich.html\"\n    }\n];","import React, { Component } from \"react\";\n\nexport default class Recipe extends Component {\n  render() {\n    const {\n      image_url,\n      title,\n      source_url,\n      publisher,\n      recipe_id\n    } = this.props.recipe;\n    const { handleDetails } = this.props;\n\n    return (\n      <React.Fragment>\n        <div className=\"col-10 mx-auto col-md-6 col-lg-4 my-3\">\n          <div className=\"card\">\n            <img\n              src={image_url}\n              alt=\"recipe\"\n              className=\"img-card-top\"\n              style={{ height: \"14rem\" }}\n            />\n            <div className=\"card-body text-capitalize\">\n              <h6>{title}</h6>\n              <h6 className=\"text-warning text-slanted\">\n                provided by {publisher}\n              </h6>\n            </div>\n            <div className=\"card-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-primary text-capitalize\"\n                onClick={() => handleDetails(0, recipe_id)}\n              >\n                details\n              </button>\n              <a\n                href={source_url}\n                className=\"btn btn-success mx-2 text-capitalize\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                recipe url\n              </a>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class RecipeSearch extends Component {\n  render() {\n    const { value, handleSubmit, handleChange } = this.props;\n    return (\n      <React.Fragment>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-10 mx-auto col-md-8 mt-5 text-center'>\n              <h1 className='text-slanted text-capitalize'>\n                search for recipe with{' '}\n                <strong className='text-danger'>Forkify</strong>\n              </h1>\n\n              <form className='mt-4' onSubmit={handleSubmit}>\n                <label htmlFor='search' className='text-capitalize'>\n                  type recipes seperated by comma\n                </label>\n                <div className='input-group'>\n                  <input\n                    type='text'\n                    name='search'\n                    placeholder='chicken,onions,carrots'\n                    className='form-control'\n                    value={value}\n                    onChange={handleChange}\n                  />\n                  <div className='input-group-append'>\n                    <button\n                      type='submit'\n                      className='input-group-text bg-primary text-white'\n                    >\n                      <i className='fas fa-search' />\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Recipe from \"./Recipe\";\nimport RecipeSearch from \"./RecipeSearch\";\n\nexport default class RecipeList extends Component {\n  render() {\n    const {\n      recipes,\n      handleDetails,\n      value,\n      handleSubmit,\n      handleChange\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        <RecipeSearch\n          value={value}\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n        />\n        <div className=\"container my-5\">\n          {/*title */}\n          <div className=\"row\">\n            <div className=\"col-10 mx-auto col-md-6 text-center text-uppercase mb-3\">\n              <h1 className=\"text-slanted\">recipe list</h1>\n            </div>\n          </div>\n          {/*end of title */}\n          <div className=\"row\">\n            {recipes.map(recipe => {\n              return (\n                <Recipe\n                  key={recipe.recipe_id}\n                  recipe={recipe}\n                  handleDetails={handleDetails}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","export const recipe = {\n    f2f_url: \"http://food2fork.com/view/35382\",\n    image_url: \"http://static.food2fork.com/Jalapeno2BPopper2BGrilled2BCheese2BSandwich2B12B500fd186186.jpg\",\n    ingredients: [\n        \"2 jalapeno peppers, cut in half lengthwise and seeded\",\n        \"2 slices sour dough bread\",\n        \"1 tablespoon butter, room temperature\",\n        \"2 tablespoons cream cheese, room temperature\",\n        \"1/2 cup jack and cheddar cheese, shredded\",\n        \"1 tablespoon tortilla chips, crumbled\"\n    ],\n    publisher: \"Closet Cooking\",\n    publisher_url: \"http://closetcooking.com\",\n    source_url: \"http://www.closetcooking.com/2011/04/jalapeno-popper-grilled-cheese-sandwich.html\",\n    title: \"Jalapeno Popper Grilled Cheese Sandwich\"\n};","import React, { Component } from 'react';\r\nimport { recipe } from '../tempDetails';\r\nexport default class RecipeDetail extends Component {\r\n  state = {\r\n    recipe: recipe,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const id = this.props.id;\r\n    // const url = `https://www.food2fork.com/api/get?key=${process.env.REACT_APP_RECIPE_KEY}&rId=${id}`;\r\n    const url = `https://forkify-api.herokuapp.com/api/get?rId=${id}`;\r\n    try {\r\n      const data = await fetch(url);\r\n      const jsonData = await data.json();\r\n      this.setState(\r\n        (state, props) => {\r\n          return { recipe: jsonData.recipe };\r\n        },\r\n        () => {}\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      image_url,\r\n      publisher,\r\n      publisher_url,\r\n      source_url,\r\n      title,\r\n      ingredients,\r\n    } = this.state.recipe;\r\n\r\n    const { handleIndex } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <div className='container'>\r\n          <div className='row'>\r\n            <div className='col-10 max-auto col-md-6 my-3'>\r\n              <button\r\n                type='button'\r\n                className='btn btn-warning mb-5 text-capitalize'\r\n                onClick={() => handleIndex(1)}\r\n              >\r\n                back to recipe list\r\n              </button>\r\n              <img src={image_url} className='d-block w-100' alt='recipe' />\r\n            </div>\r\n            {/* details */}\r\n            <div className='col-10 mx-auto col-md-6 my-3'>\r\n              <h6 className='text-uppercase'>{title}</h6>\r\n              <h6 className='text-warning text-capitalize text-salanted'>\r\n                provided by {publisher}\r\n              </h6>\r\n              <a\r\n                href={publisher_url}\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                className='btn btn-primary mt-2 text-capitalize'\r\n              >\r\n                publisher webpage\r\n              </a>\r\n              <a\r\n                href={source_url}\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                className='btn btn-success mt-2 mx-3 text-capitalize'\r\n              >\r\n                recipe url\r\n              </a>\r\n              <ul className='list-group mt-4'>\r\n                <h2 className='mt-3 mb-3'>Ingredients</h2>\r\n                {ingredients.map((item, index) => {\r\n                  return (\r\n                    <li key={index} className='list-group-item text-slanted'>\r\n                      {item}\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { recipes } from './tempList';\nimport RecipeList from './components/RecipeList';\nimport RecipeDetail from './components/RecipeDetail';\n\nclass App extends Component {\n  state = {\n    recipes: recipes,\n    url: `https://forkify-api.herokuapp.com/api/search?q=pizza`,\n    base_url: `https://forkify-api.herokuapp.com/api/search?`,\n    details_id: 47746,\n    pageIndex: 1,\n    search: '',\n    query: 'q=',\n  };\n\n  async getRecipes() {\n    try {\n      const data = await fetch(this.state.url);\n      const jsonData = await data.json();\n      console.log(this.state);\n      this.setState({\n        recipes: jsonData.recipes,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  componentDidMount() {\n    this.getRecipes();\n  }\n  displayPage = (index) => {\n    switch (index) {\n      default:\n      case 1:\n        return (\n          <RecipeList\n            recipes={this.state.recipes}\n            handleDetails={this.handleDetails}\n            value={this.state.search}\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n          />\n        );\n      case 0:\n        return (\n          <RecipeDetail\n            id={this.state.details_id}\n            handleIndex={this.handleIndex}\n          />\n        );\n    }\n  };\n\n  handleIndex = (index) => {\n    this.setState({\n      pageIndex: index,\n    });\n  };\n\n  handleDetails = (index, id) => {\n    this.setState({\n      pageIndex: index,\n      details_id: id,\n    });\n  };\n  handleChange = (e) => {\n    this.setState(\n      {\n        search: e.target.value,\n      },\n      () => {\n        console.log(this.state.search);\n      }\n    );\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { base_url, query, search } = this.state;\n\n    this.setState(\n      () => {\n        return { url: `${base_url}${query}${search}`, search: '' };\n      },\n      () => {\n        this.getRecipes();\n      }\n    );\n  };\n\n  render() {\n    // console.log(this.state.recipes);\n\n    return (\n      <React.Fragment>{this.displayPage(this.state.pageIndex)}</React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}